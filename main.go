package main

import (
	"fmt"
	"image/color"
	"log"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
	"main.go/NPC/mutrat"
	"main.go/maps"
	"main.go/objects/chest"
	"main.go/player"
)

// Game constants
const (
	ratCount = 50 // Mutant rat tally at game start
)

// chestLocale is more of a constant and declares how many chests there are (inferred by number of x,y coordinates)
// Each embedded array represents the X, Y coordinates for the respective chest
var chestLocale = [...][]float64{{80, 170}, {250, 100}, {10, 100}}

type Game struct {
	player *player.Player
	rats   [ratCount]*mutrat.Rat // Mutant rat NPC's
	chests [len(chestLocale)]*chest.Chest
}

// Update is executed every game tick (TPS). Not to be confused with FPS
func (g *Game) Update() error {
	if ebiten.IsKeyPressed(ebiten.KeyRight) {
		g.player.PosX += 1
	}

	if ebiten.IsKeyPressed(ebiten.KeyLeft) {
		g.player.PosX -= 1
	}

	if ebiten.IsKeyPressed(ebiten.KeyUp) {
		g.player.PosY -= 1
	}

	if ebiten.IsKeyPressed(ebiten.KeyDown) {
		g.player.PosY += 1
	}

	return nil
}

func (g *Game) Draw(screen *ebiten.Image) {
	screen.Fill(color.RGBA{24, 36, 50, 255}) // Set background colour (Sky blue = 120,180,255)

	maps.Draw(screen)

	for _, chest := range g.chests { // Draw any visible rustic chests
		chest.DrawChest(screen)
	}

	g.player.DrawPlayer(screen)

	for _, rat := range g.rats { // Draw all visible mutant rats
		rat.DrawRat(screen)
	}

	ebitenutil.DebugPrint(screen, "FPS = "+fmt.Sprintf("%f", ebiten.ActualFPS()))
}

func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
	// Returns the required canvas size that will be painted to.
	// Not the same as the window size as set elsewhere (see ebiten.SetWindowSize)

	// return ebiten.WindowSize() // Always use full window size
	return 320, 240 // Always use specified fixed aspect ratio and resolution for window
}

func main() {

	// Initialize game window
	ebiten.SetWindowSize(640, 480)
	ebiten.SetWindowTitle("Asylumundus")
	ebiten.SetWindowResizingMode(ebiten.WindowResizingModeEnabled)
	game := Game{}

	// Load map data
	maps.NewTilemap() // Load map data from respective JSON files as generated by Tiled

	game.player = player.NewPlayer() // Instantiate player

	for i := 0; i < ratCount; i++ {
		game.rats[i] = mutrat.NewRat(float64(i*75), float64(i*75)) // Insantiate mutant rats
	}

	for i := 0; i < len(game.chests); i++ {
		game.chests[i] = chest.NewChest(chestLocale[i][0], chestLocale[i][1]) // Insantiate rustic chests
	}

	if err := ebiten.RunGame(&game); err != nil {
		log.Fatal(err)
	}

}
